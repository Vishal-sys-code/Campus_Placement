We can store same type of multiple data in array. Can we store different types of multiple data in an array? What do you think?

Answer: No we can't

We have a special kind of derived data-type for this purpose, and it is called as structure. 

Structure is a collection of variables of different data types under a single name. 

Syntax :

struct structure_name{
    member 1;
    member 2;
    .
    .
    .
    member N;
}

Declaration in CPP: 

struct student{
    char name[20];
    int age;
    float cgpa;
}student1,student2;

// Declaration like basic data-type
struct student{
    char name[20];
    int age;
    float cgpa;
}

int main(){
    struct student student1,student2;
}


-----------------------------------------------------------------------------------------------------

struct student{
    char name[20];
    int age;
    float cgpa;
}

int main(){
    student s1 = {"Raj",45,67.8};
    student s2 = {"Rani",34,78.9};
    s1.name = "Ron";
    s2.age = 78;
    cout << s1.name << endl; 
    cout << s1.age << endl;
    cout << s1.cgpa << endl;

    cout << s2.name << endl; 
    cout << s2.age << endl;
    cout << s2.cgpa << endl;
}

-------------------------------------------------------------------------------------------------
Q.) 
#include <iostream> 
struct sample { 
  int a = 0; 
  char b = 'A'; 
  float c = 10.5; 
}; 
int main() 
{ 
  sample s; 
  std::cout<<s.a<<" "<<s.b<<" "<<s.c; 
  return 0; 
} 

Output: 
0 A 10.5

Q.) 
#include <iostream> 
#include <cstring> 
struct Test 
{ 
	char str[20]; 
}; 
int main() 
{ 
	struct Test st1, st2; 
	strcpy(st1.str, "Win"); 
	st2 = st1; 
	st1.str[0] = 'S'; 
	std::cout << st2.str; 
	return 0; 
} 

Output:
Win

Q.) 
#include<iostream> 
struct Point 
{ 
 int x, y, z; 
}; 
  
int main() 
{ 
 struct Point p1 = {.y = 0,.x = 2, .z = 1}; 
 std::cout<< p1.x<< p1.y<< p1.z; 
 return 0; 
} 

Output: 
Error