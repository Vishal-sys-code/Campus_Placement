In programming, we need to execute set of code repeatedly until the stated condition becomes false. This is called looping statement or iteration.


Factorial of a number : [C++] 

#include <bits/stdc++.h>
using namespace std;
#define ll long long

ll fact(ll n){
    return (n == 1 || n == 0) ? 1 : n * fact(n - 1);
}

int main(){
    ll n; cin>>n;
    cout << fact(n) << endl;
    return 0;
}

While Loops:

In entry controlled loop, we have another type of looping statement which is called while.


Reverse a number: [C++]

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int reverseDigits(int n){
    string strin = to_string(n);
    reverse(strin.begin(), strin.end());
    n = stoi(strin);
    return n;
}

int main(){
    ll n; cin>>n;
    cout << reverseDigits(n) << endl;
    return 0;
}

Count of digits: [C++]

#include <bits/stdc++.h>
using namespace std;
#define ll long long

int main(){
    ll n; cin>>n;
    ll cnt = 0;
    if(n == 0){
        n = 1;
    }
    while(n>0){
        n/=10;
        cnt++;
    }
    cout<< cnt << endl;
}

Do while Loop:

1.) do while loop is exti controlled loop
2.) If iteration is fixed FOR LOOP is recommended
3.) If iteration is not fixed, WHILE LOOP is recommended
4.) Execute the statements atleast once, do while loop is recommended


Decrypt the Message: [CPP

Problem Statement: The terrorist hijacked the famous Taj hotel in Mumbai and it has many VIPs, children, and family members. The hotel manager decides to inform the police but he wants to send the message without the knowledge of terrorists. So, he sends the message in the form of an encrypted number. Unfortunately, the message is received by the terrorist. The terrorist has to enter the number if they want to read the message. If the resultant of adding the encrypted number and number entered by a terrorist is a perfect number, then they can read the message. Otherwise, they can't read the message.
A perfect number is a number which is equal to the sum of its proper positive divisors, excluding the number itself.

Input Format: The first input contains an integer which denotes the encrypted number

The second input contains an integer which denotes the number entered by a terrorist

Output Format:

If the resultant of adding the encrypted number and number entered by a terrorist is a perfect number, then print "They can read the message". Otherwise, print "They can't read the message".

Sample Input:

3

3

Sample Output:

They can read the message

Explanation:

6 has divisors 1, 2 and 3 (excluding itself), and 1 + 2 + 3 = 6, so 6 is a perfect number.

Code:

#include <bits/stdc++.h>
using namespace std;

int main(){
    int a,b; cin>>a>>b;
    int n = a+b;
    int sum = 0;
    for(int i=1;i<n;i++){
        if(n%i == 0){
            sum+=i;
        }
    }
    if(n == sum){
        cout << "They can read the message" << endl;
    }
    else{
        cout << "They can't read the message" << endl;
    }
    return 0;
}

Perfect Number in range: [CPP]

#include <bits/stdc++.h>
using namespace std;

bool isPerfect(int n)
{
	int i = 0;
	int sum = 0;

	while (i++ < n)
	{
		if (n % i == 0 && i < n)
		{
			sum += i;
		}
	}
	return sum == n;
}

int main(){
    int l,r; cin>>l>>r;
    for(int i = l; i<=r;i++){
        if(isPerfect(i)){
            cout << i << " ";
        }
    }
    return 0;
}

---------------------------------------------------------------------------------------------------------------

Lucky Draw

Regina is incharge of the annual day committee. The annual day committee decides to conduct a lucky draw for the audience. As the crowd is huge, it is very hard to include the whole audience in the lucky draw. Therefore, management decides to conduct lucky draw only for the audience who have occupied the chair number which is prime. Regina and other committee members find it difficult to check which chair numbers are prime. Can you help them to find out whether the chair number is prime or not?
Prime number is a number which can be divided only by 1 and itself.

Input Format:

The input consist of an integer which denotes the chair number

Output Format:

If chair number is prime, print "Eligible". Otherwise, print "Not eligible".

Sample Input:

3

Sample Output:

Eligible

---------------------------------------------------------------------------------------------------------------

Summary of Break Statement

1.) Jump Statements are used to alter the flow of control unconditionally.
2.) Type of Jump Statements are: break, continue, and goto
3.) break statement is used in looping and switch case
4.) break is used to terminate the existing block or loop

---------------------------------------------------------------------------------------------------------------

Q.) #include<iostream>
int main()
{
    int i = 0;
    do 
    { 
        if (i++ < 1) 
        { 
            std::cout<<i; 
            continue; 
        } 
    }while(i <= 1);
    return 0; 
}

Output: 1

Q.) #include <iostream>
int main(){
  int i, count;
  do
  {	
    for(i = 1; i < 5; i++) {
      std::cout<<i<<" ";
      if(i == 1)
      {   
        goto stop;
        std::cout<<"hello";
      }   
    }
    stop:
        count++;
        std::cout<<count<<"\n";
  }while(count < 4);
}

Output: 
1 1
1 2
1 3
1 4


Q.) #include <iostream>
int main () 
{
  int a = 1;
  LOOP:do {
   if(a == 3){
     a = a + 1;
     goto LOOP;
   }
   std::cout<<a<<" ";
   a++;
  }while(a <= 3);
}

Output: 1 2 4


Q.) 
#include<iostream>
int main(){
  int i = 1;
  while(i < 10)
  {
    std::cout<<i;
  }
}

Output: Infinite times 1

Q.) 
#include <iostream>
int main(){
  for(int i = 0; ;i = (i+1)%2 )
  {
    std::cout<<i<<"\n";
  }
}

Output: 
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0
1
0........Infinite Loop

Q.) 
#include <iostream>
int main(){
  int i;
  for(i=1; i<=10; i++)
  {
    if(i%2 == 0)
    {
      break;
    }
  }
}

Output: No Output

Q.) 
#include <iostream>
int main(){
  int i = 1;
  do{
    std::cout<<i;
    i++;
  }while(i = 10);
}

Output: Infinite Loop


Q.) #include<iostream>
int main()
{
  while('A')
    std::cout<<"hello";
}

Output: Infinite Loop

