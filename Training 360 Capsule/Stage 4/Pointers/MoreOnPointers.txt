1.) 
#include<iostream>
int main()
{
   int a = 10, *p;
   p = &a;
   *p++;
   std::cout<<*p;
}

Output: Garbage Value

-----------------------------------------------------
NULL pointer:



Like variables, when pointers are not initialized, a pointer will point to some garbage address by default.



In some cases, we donâ€™t have address to be assigned to a pointer. In such case, we can simply use NULL to avoid some random address. 

A NULL value is a constant with a value of zero. A pointer that is assigned NULL is called a NULL pointer.

Example program:

#include<iostream>
int main()
{
  int *ptr = NULL;
  std::cout<<ptr;
}

Output: 0
-----------------------------------------------------


Wild Pointer:



A pointer which is not initialized till it's first use is known as the wild pointer.



A wild pointer points to some random memory location.


Can we avoid Wild Pointers??
Answer: To avoid wild pointer, we can initialize a pointer at the point of declaration either by the address of some variable or by NULL.
-----------------------------------------------------

2.) 
#include<iostream>
int main()
{
   char *p;
   int i = 97;
   p = &i;
   std::cout<<*p;
}
Output: Error

The program pass the compiler error. Because you cannot assign the address of variable of one type to a pointer of another type. 

#include<iostream>
int main()
{
   char *p; // Character pointer
   int i = 97; // integer value
   p = &i;
   std::cout<<*p;
}


How can we avoid that error?


We can avoid that error by using void pointer (void *)



Void pointer:

A void pointer does not have any data type and it can be assigned a value of any type. Also known as generic pointer.



Void pointer is capable of storing address of any data type.


Example program:

#include<iostream>
int main()
{
    void *ptr;
    int i = 10;
    char c = 'a';
    ptr = &i; // Address of integer is assigned
    ptr = &c; // Address of character is assigned
}


-------------------------------------------------------------------------------------

3.) 
#include<iostream>
int main()
{
  void *p;
  int i =10;
  p = &i;
  std::cout<<*p;
}

Output: error

---------------------------------------------------------------------------------------

Dangling pointers in computer programming are pointers that pointing to a memory location that has been deleted (or freed).

Explanation:

Dangling pointers arise during object destruction, when an object that has an incoming reference is deleted or deallocated, without modifying the value of the pointer, so that the pointer still points to the memory location of the deallocated memory.

The system may reallocate the previously freed memory, unpredictable behavior may result as the memory may now contain completely different data.

The pointer pointing to local variable doesn't become dangling when local variable is static. 


---------------------------------------------------------------------------------------